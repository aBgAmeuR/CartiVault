---
alwaysApply: true
---
# Server Architecture

- Server built with Elysia: [apps/server/src/app/server.ts](mdc:apps/server/src/app/server.ts)
- Entry: [apps/server/src/index.ts](mdc:apps/server/src/index.ts)
- RPC mounted at `/rpc` using ORPC `RPCHandler`: [apps/server/src/app/routes.ts](mdc:apps/server/src/app/routes.ts)
- Auth routed at `/api/auth/*`: [apps/server/src/lib/auth.ts](mdc:apps/server/src/lib/auth.ts)
- Context and procedures: [apps/server/src/lib/orpc.ts](mdc:apps/server/src/lib/orpc.ts)
  - `publicProcedure`, `protectedProcedure`, `adminProcedure`
- DB (Turso + Drizzle): [apps/server/src/db/index.ts](mdc:apps/server/src/db/index.ts), schema in [apps/server/src/db/schema](mdc:apps/server/src/db/schema)
- Storage (R2/S3): [apps/server/src/lib/r2.ts](mdc:apps/server/src/lib/r2.ts)

## Adding a new RPC Module
- Create folder `apps/server/src/modules/<module>/`
  - `dto.ts`, `repository.ts`, `service.ts`, `router.ts`
- Export router from `<module>/router.ts` and wire it in [apps/server/src/app/routes.ts](mdc:apps/server/src/app/routes.ts)
- Keep input/output validated with `zod` in `dto.ts`.