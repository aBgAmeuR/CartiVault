---
globs: *.ts,*.tsx,*.vue
---
# Coding Style

- Use tabs for indentation; do not convert to spaces (matches `biome.json`).
- Prefer double quotes in JS/TS code.
- Write clear, descriptive names for variables, functions, and files.
- Keep control flow simple with early returns and explicit error handling.
- Avoid deep nesting; extract helpers where complexity grows.
- Add concise comments only where intent is non-obvious.
- Match existing formatting and avoid reformatting unrelated code.

## Naming
- Variables and functions: use full words, avoid cryptic abbreviations.
- Functions named as verbs/verb phrases; variables as nouns.
- Use `camelCase` for variables/functions, `PascalCase` for components/types.
- File names: `kebab-case` for Vue components and utilities; `PascalCase.vue` for Vue SFCs.

## Types (TypeScript)
- Explicitly annotate exported APIs and function parameters/returns in public modules.
- Do not over-annotate trivially inferred locals.
- Prefer precise types over `any`; avoid unsafe casts.
- Validate DTOs and RPC inputs/outputs with `zod`.

## Control flow and errors
- Prefer guard clauses and early returns over nested conditionals.
- Handle edge cases first; fail fast with clear messages.
- Do not swallow errors; log on server side with context where appropriate.

## Comments
- Focus on explaining "why", not "how".
- No TODOsâ€”implement or create an issue.
- Place comments above the code they refer to, not inline at line end.

## Formatting
- Keep lines reasonably short and readable.
- Use multi-line formatting for complex expressions/objects.
- Organize and dedupe imports; prefer module path aliases when available.

## Server specifics
- Keep module boundaries: `dto.ts`, `repository.ts`, `service.ts`, `router.ts`.
- Input validation at the edge (router/service) with `zod` schemas.
- Use `publicProcedure`, `protectedProcedure`, `adminProcedure` appropriately.
- Access env via the parsed `env` object; avoid `process.env` in app code.

## Web specifics (Nuxt/Vue)
- Use NUXT UI components for UI elements.
- Composition API with `<script setup>` by default.
- Use `useNuxtApp()` to access injected `orpc` and `authClient`.
- Keep components small; extract logic to composables under `app/composables` when reusable.
- Use TanStack Query for async state; surface errors via the global toast handler.
- Do not block the UI; prefer optimistic updates where appropriate with proper invalidation.