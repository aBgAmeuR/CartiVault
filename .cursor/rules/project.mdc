---
alwaysApply: true
---
## CartiVault – Project Guide and Global Rules

This rule is a high-level guide for working in the CartiVault monorepo. It complements focused rules in:
- Project structure: [.cursor/rules/project-structure.mdc](mdc:.cursor/rules/project-structure.mdc)
- Scripts and tasks: [.cursor/rules/scripts.mdc](mdc:.cursor/rules/scripts.mdc)
- Server architecture: [.cursor/rules/server-architecture.mdc](mdc:.cursor/rules/server-architecture.mdc)
- Web architecture: [.cursor/rules/web-architecture.mdc](mdc:.cursor/rules/web-architecture.mdc)
- Environment variables: [.cursor/rules/env.mdc](mdc:.cursor/rules/env.mdc)
- Coding style: [.cursor/rules/coding-style.mdc](mdc:.cursor/rules/coding-style.mdc)

### Tech stack overview
- Monorepo with `pnpm` workspaces and `turbo`
- Server: Elysia + ORPC + Drizzle (Turso) + Better Auth + R2 (S3-compatible)
- Web: Nuxt 4 SPA + @nuxt/ui-pro + TanStack Query + Tauri desktop (optional)

## Setup
- Install `pnpm` and run `pnpm install` at the repo root
- Create a `.env` file at the repo root with values from [.cursor/rules/env.mdc](mdc:.cursor/rules/env.mdc)
- All app scripts automatically load the root `.env`

## Development
- Run everything: `pnpm dev`
- Server only: `pnpm dev:server` (listens on `env.PORT`, default 3000)
- Web only: `pnpm dev:web` (Nuxt 3001, HMR 3000)
- Desktop (Tauri): `pnpm desktop:dev` (serves Nuxt on 3001)

### Build and run
- Build all: `pnpm build`
- Start all: `pnpm start`
- Type-check: `pnpm check-types`

## URLs and ports
- Server base: `http://localhost:<PORT>` (default 3000)
- Web dev: `http://localhost:3001` (HMR on 3000)
- RPC base: `${NUXT_PUBLIC_SERVER_URL}/rpc`
- Auth base: `${NUXT_PUBLIC_SERVER_URL}/api/auth/*`

## Database (Drizzle + Turso)
- Configure `DATABASE_URL` and optional `DATABASE_AUTH_TOKEN` in `.env`
- Common commands (from repo root):
  - `pnpm db:push` – push schema
  - `pnpm db:generate` – generate migrations
  - `pnpm db:migrate` – run migrations
  - `pnpm db:studio` – open Drizzle Studio

## Auth and RPC
- Auth routes at `/api/auth/*` via Better Auth
- RPC at `/rpc` via ORPC; client provided in Web plugin
- In components, use `const { orpc } = useNuxtApp()` to access RPC utilities

## Storage (R2/S3)
- Configure `R2_ENDPOINT`, `R2_ACCESS_KEY_ID`, `R2_SECRET_ACCESS_KEY`, `R2_BUCKET_NAME`, and optional `R2_PUBLIC_BASE_URL`
- Server helper: `getR2Client()` in `apps/server/src/lib/r2.ts`

## Conventions
- Tabs for indentation (see `biome.json`); avoid reformatting unrelated code
- Prefer descriptive names for files, variables, and functions
- Early returns; avoid deep nesting; handle errors explicitly
- Keep DTOs and procedure input/output validated with `zod`
- When adding server modules, follow the module structure in [.cursor/rules/server-architecture.mdc](mdc:.cursor/rules/server-architecture.mdc)

## Contribution workflow
- Keep changes scoped; follow existing architecture boundaries
- Validate types with `pnpm check-types`
- Ensure env-dependent features degrade gracefully when env vars are missing
- For RPC changes, update router typings and corresponding web usage

## Troubleshooting
- CORS/auth issues: verify `CORS_ORIGIN`, `NUXT_PUBLIC_SERVER_URL`, and Better Auth `baseURL`
- RPC errors: confirm `/rpc` prefix and that headers include `Authorization: Bearer <token>`
- HMR conflicts: ensure Nuxt dev is on 3001 and HMR on 3000 (see `apps/web/nuxt.config.ts`)